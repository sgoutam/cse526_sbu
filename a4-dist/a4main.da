# place holder for the parts you are to do; may delete after you finish all
def TODO(hint = ''): return False

import random

class BoardAI:
  def __init__(self, n):
    """create an empty n-by-n board, with indices starting at 1
    """
    self.board = {(i,j):0 for i in range(1,n+1) for j in range(1,n+1)}
    self.n = n

  def move(self, id):
    """find next position for player id, update board, and return the position
    """
    pos = random.choice([(i,j) for (i,j) in self.board if self.board[i,j]==0])
    self.update(pos, id)
    print('---- move by player', id, ' : ', pos)
    return pos

  def update(self, pos, id):
    """update board to reflect that position pos is taken by player id
    """
    self.board[pos] = id

  def win(self, id):
    """print result if player id has won, and return whether id has won
    if TODO('row i are all occupid by player id'):
      print('==== player', id, 'won: row', i); return True
    if TODO('column j are all occupid by player id'):
      print('==== player', id, 'won: column', j); return True
    if TODO('left diagonal are all occupid by player id'):
      print('==== player', id, 'won: left diagonal'); return True
    if TODO('right diagonal are all occupid by player id'):
      print('==== player', id, 'won: right diagonal'); return True
    return False
    """

    # check row sum == n, for all i's sum of j's
    if (some(i in range(1, self.n+1), has=(sum([1 for j in range(1, self.n+1) \
                if self.board[(i,j)] == id ]) == self.n))):
      print('==== player', id, 'won: row', i); return True

    # check if column sum == n, for all j's sum of i's
    if (some(j in range(1, self.n+1), has=(sum([1 for i in range(1, self.n+1) \
                if self.board[(i,j)] == id]) == self.n))):
      print('==== player', id, 'won: column', j); return True

    # check if left diagonal. i == j values
    if (sum(1 for i in range(1, self.n+1) if self.board[(i,i)] == id) == self.n):
      print('==== player', id, 'won: left diagonal'); return True
    
    # check if right diagonal, i, n-i values
    if (sum(1 for i in range(1, self.n+1) if self.board[(i, self.n-i+1)] == id) == self.n):
      print('==== player', id, 'won: right diagonal'); return True
      
    # default
    return False

  def finished(self, debug=False):
    """return if some player has won, or if the board is full so it is a draw
    """

    # get all ids placed on the board {0,1,2}
    board_items = set(self.board.values())
    if debug:
      self.show(id)

    if 0 in board_items:
      # some spaces are still empty
      return (False,0)
    
    for item in board_items:
      if (item != 0):
        if self.win(item) is True:
          return (True,1)

    if 0 not in board_items:
      # if it reaches here, no one has won and no spaces are left
      if debug:
        print("All spaces are filled. It's a draw!")
      return (True,0)

    return (False,0)
    


  def show(self, id):
    """show the board of player id; id is not needed for the show (line 4);
       it is used for printing with board atomically (line 2)
    """
    board = self.board;  Is = {i for (i,_) in board}
    print('board of ', id, ':',  board)
    marks = {0: '_', 1: 'o', 2: 'x'}
    print('\n'.join(' '.join(marks[board[i,j]] for j in Is) for i in Is)) 

class Player (process):

  def setup(board, id, ps):        # take board size, own id, other processes
    board.show(id)

  def run():
    TODO('player 1 should start; play until finished')
    if id == 1:
      # player just starts the game here and then all other moves
      # are done using receive
      my_pos = board.move(id)
      send((my_pos, id), to=ps)
    
    # other player sends "Done" to indicate their board is complete
    await(received(("Done",)))

    # Two way handshake to confirm termination
    send(("Done",), to=ps)


  def receive(msg= (pos, id2)):    # receive next position from player id2
    TODO('take action seeing a move by player id2')

    # update players board with id2's move
    board.update(pos, id2)
    my_id = id
    board.show(id)

    board_win = board.finished()
    # print(board_win)
    if board_win[0] == False:
      # empty slots 
      my_move = board.move(my_id)
      send((my_move, my_id), to=ps)
    else:
      # either draw or someone won
      if board_win[1] == 0:
        print(f"player {my_id} : it's a draw!")
        send(("Done",), to=ps)
      elif board_win[1] == 1:
        if id2 != my_id:
          print(f"player {my_id} : Congratulations to {id2}")
        else:
          print(f"player {my_id} : I win!")
        send(("Done",), to=ps)


def main():
  n = 3                            # size n for n-by-n board
  board = BoardAI(n)

  num_players = 2
  TODO('create, setup, and start both players, with ids 1 and 2, respetively')

  players = list( new(Player, num = num_players))

  # player1 = new(Player)
  # player2 = new(Player)

  setup(players[0], (board, int(1), players[1]))
  setup(players[1], (board, int(2), players[0]))
  start(players[0])
  start(players[1])

